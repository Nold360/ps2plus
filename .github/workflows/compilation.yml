name: build/test/release

on: push

jobs:
  configurator:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Check out entire history, including tags (required for versioning)

      - name: Compile the `latest` version (via Docker Compose)
        run: VERSION_METADATA=latest docker compose run configurator
        shell: bash

      - name: Upload `latest` configurator
        uses: actions/upload-artifact@v2
        with:
          name: configurator-latest
          path: dist/configurator/*

      - name: Delete `latest` files
        run: sudo rm -rf dist/configurator
        shell: bash

      - name: Compile the tagged version, if necessary (via Docker Compose)
        run: VERSION_METADATA= docker compose run configurator
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash

      - name: Upload versioned configurator, if necessary
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: configurator-release
          path: dist/configurator/*

  bootloader-and-firmware:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: 
          - PIC18F46K42
    steps:
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Check out entire history, including tags (required for versioning)

      - name: Generate the appropriate Docker Compose service name
        id: service-name
        uses: ASzc/change-string-case-action@v1
        with:
          string: firmware-${{ matrix.platform }}

      - name: Compile the `latest` version (via Docker Compose)
        run: VERSION_METADATA=latest docker compose run ${{ steps.service-name.outputs.lowercase }}
        shell: bash

      - name: Upload `latest` combined firmware/bootloader
        uses: actions/upload-artifact@v2
        with:
          name: firmware-bootloader-latest
          path: dist/firmware/*.zip

      - name: Delete `latest` files
        run: sudo rm -rf dist/firmware
        shell: bash

      - name: Compile the tagged version, if necessary (via Docker Compose)
        run: docker compose run ${{ steps.service-name.outputs.lowercase }}
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash

      - name: Upload versioned combined firmware/bootloader, if necessary
        uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: firmware-bootloader-release
          path: dist/firmware/*.zip

  test:
    needs: [configurator, bootloader-and-firmware]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: 
          - native
    steps:
      - name: Check out the code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Check out entire history, including tags (required for versioning)

      - name: Generate the appropriate Docker Compose service name
        id: service-name
        uses: ASzc/change-string-case-action@v1
        with:
          string: test-${{ matrix.platform }}

      - name: Run tests (via Docker Compose)
        run: docker compose run ${{ steps.service-name.outputs.lowercase }}
        shell: bash

      - name: Find the generated coverage report, if any
        id: find-coverage-report
        run: echo "::set-output name=coverage-folder::$(find build/ -type d -wholename */*/coverage)"
        shell: bash

      - name: Publish coverage report
        id: publish-coverage-report
        if: steps.find-coverage-report.outputs.coverage-folder != ''
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ${{ steps.find-coverage-report.outputs.coverage-folder }}
          target-folder: ${{ steps.find-coverage-report.outputs.coverage-folder }}
          clean: true
          silent: true

      - name: Generate coverage report link
        if: steps.publish-coverage-report.outputs.deployment-status == 'success'
        run: |
          GITHUB_REPOSITORY_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
          echo âœ… Published coverage report: "https://$GITHUB_REPOSITORY_OWNER.github.io/$GITHUB_REPOSITORY_NAME/${{ steps.find-coverage-report.outputs.coverage-folder }}"
        shell: bash

  release:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3

      - name: Display structure of downloaded files
        run: ls -R

      - name: Delete the `latest` tag and release, if existing
        uses: dev-drprasad/delete-tag-and-release@v0.2.0
        with:
          delete_release: true
          tag_name: latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release the `latest` version
        uses: softprops/action-gh-release@v1
        with:
          name: Development build
          tag_name: "latest"
          prerelease: true
          files: |
            firmware-bootloader-latest/*
            configurator-latest/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}